import { useEffect, useState } from 'react';
import { ethers, Contract } from 'ethers';
import { Biconomy } from "@biconomy/mexa";
import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';

const CONTRACT_ADDRESS = "0x6E0924dD1dc89E51afAd8D656a037CF6E70DEF1e";
const ABI = [
  {
    "inputs": [
      {
        "internalType": "string",
        "name": "_greeting",
        "type": "string"
      },
      {
        "internalType": "address",
        "name": "trustedForwarder",
        "type": "address"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "inputs": [],
    "name": "greeting",
    "outputs": [
      {
        "internalType": "string",
        "name": "",
        "type": "string"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "forwarder",
        "type": "address"
      }
    ],
    "name": "isTrustedForwarder",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "string",
        "name": "_greeting",
        "type": "string"
      }
    ],
    "name": "setGreeting",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }
];

export default function Home() {
  const [greeting, setGreeting] = useState("");
  const [greetingInput, setGreetingInput] = useState(null);
  const [contract, setContract] = useState(null);
  const [isConnected, setIsConnected] = useState(false);
  const [account, setAccount] = useState(null);

  useEffect(() => {
    getGreeting();
  }, [isConnected, contract]);

  const connectWallet = async () => {
    try {
      if (window.ethereum) {
        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        const contract = new Contract(CONTRACT_ADDRESS, ABI, provider);
        setContract(contract);
        setIsConnected(true);
        setAccount(accounts[0]);
        console.log("Connected");
      } else {
        console.log("Install MetaMask");
      }
    } catch (error) {
      console.log(error);
    }
  };

  const handleSumbitGreeting = async () => {
    if (!isConnected) return alert("Please connect to wallet");
    if (!greetingInput) return alert("Please enter a greeting");
    // 
    try {
      const biconomy = new Biconomy(
        window.ethereum,
        {
          apiKey: process.env.NEXT_PUBLIC_BICONOMY_API_KEY,
          debug: true,
          contractAddresses: [CONTRACT_ADDRESS]
        }
      );
      const provider = biconomy.provider;

      const contractInstance = new ethers.Contract(
        CONTRACT_ADDRESS,
        ABI,
        biconomy.ethersProvider
      );
      await biconomy.init();

      const { data } = await contractInstance.populateTransaction.setGreeting(greeting);

      let txParams = {
        data: data,
        to: CONTRACT_ADDRESS,
        from: account,
        signatureType: "EIP712_SIGN",
      };

      await provider.send("eth_sendTransaction", [txParams]);
    } catch (error) {
      console.log(error);
    }
  };

  const getGreeting = () => {
    if (contract) {
      contract.greeting().then((greeting) => {
        setGreeting(greeting);
      });
    } else {
      console.error("Contract not loaded");
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {isConnected ? (
          <div className={styles.greeterContainer}>
            <h3>{greeting || "Loading.."}</h3>
            <input type="text" className={styles.greeterInput} placeholder='Type your greeting' onChange={(e) => setGreetingInput(e.target.value)} />
            <button
              className={styles.button}
              onClick={handleSumbitGreeting}
            >
              Submit
            </button>
          </div>
        ) : (
          <button className={styles.button} onClick={connectWallet}>Connect Wallet</button>
        )}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}
