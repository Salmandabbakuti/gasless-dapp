import { useEffect, useState } from 'react';
import { ethers, Contract } from 'ethers';
import { Biconomy } from "@biconomy/mexa";
import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';

const CONTRACT_ADDRESS = process.env.NEXT_PUBLIC_CONTRACT_ADDRESS;
const ABI = [
  "function greeting() view returns (string)",
  "function isTrustedForwarder(address forwarder) view returns (bool)",
  "function setGreeting(string _greeting)",
  "function trustedForwarder() view returns (address)"
];

export default function Home() {
  const [greeting, setGreeting] = useState("");
  const [greetingInput, setGreetingInput] = useState("");
  const [contract, setContract] = useState(null);
  const [isConnected, setIsConnected] = useState(false);
  const [account, setAccount] = useState(null);
  const [logMessage, setLogMessage] = useState("");
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (isConnected && contract) {
      getGreeting();
    }
  }, [isConnected, contract]);

  const connectWallet = async () => {
    try {
      if (window.ethereum) {
        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        const contract = new Contract(CONTRACT_ADDRESS, ABI, provider);
        setContract(contract);
        setIsConnected(true);
        setAccount(accounts[0]);
        console.log("Connected");
      } else {
        console.log("Install MetaMask");
      }
    } catch (error) {
      console.log(error);
    }
  };

  const handleSumbitGreeting = async () => {
    if (!isConnected) return alert("Please connect to wallet");
    if (!greetingInput) return alert("Please enter a greeting");
    // 
    try {
      setLoading(true);
      const biconomy = new Biconomy(
        window.ethereum,
        {
          apiKey: process.env.NEXT_PUBLIC_BICONOMY_API_KEY,
          debug: true,
          contractAddresses: [CONTRACT_ADDRESS]
        }
      );

      const provider = biconomy.provider;
      const contractInstance = new ethers.Contract(
        CONTRACT_ADDRESS,
        ABI,
        biconomy.ethersProvider
      );
      await biconomy.init();

      // biconomy.onEvent(biconomy.READY, () => {
      //   console.log("Biconomy is ready");
      // }).onEvent(biconomy.ERROR, (error, message) => {
      //   console.log("Biconomy error", error, message);
      // });

      const { data } = await contractInstance.populateTransaction.setGreeting(greetingInput);

      let txParams = {
        data: data,
        to: CONTRACT_ADDRESS,
        from: account,
        signatureType: "EIP712_SIGN",
      };

      await provider.send("eth_sendTransaction", [txParams]);
      setLogMessage("Transaction sent");
      biconomy.on("txHashGenerated", (data) => {
        setLogMessage("Transaction hash generated");
        console.log("txHashGenerated", data);
      });

      biconomy.on("txMined", (data) => {
        setLogMessage("Transaction mined");
        console.log("txMined", data);
        getGreeting();
      });

      biconomy.on("onError", (err) => {
        setLogMessage(`Transaction failed: ${err.message}`);
        console.error("onError", err);
      });

      biconomy.on("txHashChanged", (data) => {
        setLogMessage("Transaction hash changed");
        console.log("txHashChanged", data);
      });
      setLoading(false);
    } catch (error) {
      setLoading(false);
      setLogMessage(`Transaction failed: ${error.message}`);
      console.log(error);
    }
  };

  const getGreeting = () => {
    if (contract) {
      contract.greeting().then((greeting) => {
        console.log('greeting from contract:', greeting);
        setGreeting(greeting);
      }).catch((error) => console.log('error fetching greeting', error));
    } else {
      console.error("Contract not loaded");
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Gasless Dapp</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <span>Gasless Dapp</span>
        </h1>

        <p className={styles.description}>
          A Dapp is cooler when it is gasless. A simple Dapp to demonstrate gasless transactions using Biconomy
        </p>
        {isConnected ? (
          <div className={styles.greeterContainer}>
            <h3>{greeting || "Loading.."}</h3>
            <input type="text" className={styles.greeterInput} placeholder='Type your greeting' onChange={(e) => setGreetingInput(e.target.value)} />
            <button
              className={styles.button}
              onClick={handleSumbitGreeting}
              disabled={loading}
            >
              Submit
            </button>
          </div>
        ) : (
          <button className={styles.button} onClick={connectWallet}>Connect Wallet</button>
        )}
        {loading && <p>Loading...</p>}
        <p>{logMessage}</p>
      </main>

      <footer className={styles.footer}>
        <a href="https://github.com/Salmandabbakuti" target="_blank" rel="noopener noreferrer">
          Â© 2022 Salman Dabbakuti. Built with Biconomy
        </a>
      </footer>
    </div>
  );
}
